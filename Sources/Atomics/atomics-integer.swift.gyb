//
//  atomics-integer.swift
//  Atomics
//
//  Created by Guillaume Lessard on 31/05/2016.
//  Copyright Â© 2016-2017 Guillaume Lessard. All rights reserved.
//  This file is distributed under the BSD 3-clause license. See LICENSE for details.
//

import CAtomics
% for IntType in ['Int', 'UInt', 'Int8', 'UInt8', 'Int16', 'UInt16', 'Int32', 'UInt32', 'Int64', 'UInt64', 'Bool']:
% AtomicType = 'Atomic' + IntType
% CAtomicsType = 'CAtomics' + IntType

public struct ${AtomicType}
{
  @_versioned var val = ${CAtomicsType}()

% default = 'false' if IntType == 'Bool' else '0'
  public init(_ value: ${IntType} = ${default})
  {
    val.initialize(value)
  }

  public var value: ${IntType} {
    @inline(__always)
    mutating get { return val.load(.relaxed) }
  }
}

extension ${AtomicType}
{
  @inline(__always)
  public mutating func load(order: LoadMemoryOrder = .relaxed) -> ${IntType}
  {
    return val.load(order)
  }

  @inline(__always)
  public mutating func store(_ value: ${IntType}, order: StoreMemoryOrder = .relaxed)
  {
    val.store(value, order)
  }

  @inline(__always)
  public mutating func swap(_ value: ${IntType}, order: MemoryOrder = .relaxed) -> ${IntType}
  {
    return val.swap(value, order)
  }

% if IntType == 'Bool':
% for (rmwMethod, rmwFunc, rmwParam) in [('or', 'fetch_or', 'value'), ('xor', 'fetch_xor', 'value'), ('and', 'fetch_and', 'value')]:
  @inline(__always) @discardableResult
  public mutating func ${rmwMethod}(_ ${rmwParam}: ${IntType}, order: MemoryOrder = .relaxed) -> ${IntType}
  {
    return val.${rmwFunc}(${rmwParam}, order)
  }

% end # for
% else:
% for (rmwMethod, rmwFunc, rmwParam) in [('add', 'fetch_add', 'delta'), ('subtract', 'fetch_sub', 'delta'), ('bitwiseOr', 'fetch_or', 'bits'), ('bitwiseXor', 'fetch_xor', 'bits'), ('bitwiseAnd', 'fetch_and', 'bits')]:
  @inline(__always) @discardableResult
  public mutating func ${rmwMethod}(_ ${rmwParam}: ${IntType}, order: MemoryOrder = .relaxed) -> ${IntType}
  {
    return val.${rmwFunc}(${rmwParam}, order)
  }

% end # for
% for (inc, op) in [('increment', 'fetch_add'), ('decrement', 'fetch_sub')]:
  @inline(__always) @discardableResult
  public mutating func ${inc}(order: MemoryOrder = .relaxed) -> ${IntType}
  {
    return val.${op}(1, order)
  }

% end # for
% end # if IntType == 'Bool'
  @inline(__always) @discardableResult
  public mutating func loadCAS(current: UnsafeMutablePointer<${IntType}>, future: ${IntType},
                               type: CASType = .weak,
                               orderSwap: MemoryOrder = .relaxed,
                               orderLoad: LoadMemoryOrder = .relaxed) -> Bool
  {
    return val.loadCAS(current, future, type, orderSwap, orderLoad)
  }

  @inline(__always) @discardableResult
  public mutating func CAS(current: ${IntType}, future: ${IntType},
                           type: CASType = .strong,
                           order: MemoryOrder = .relaxed) -> Bool
  {
    return val.CAS(current, future, type, order)
  }
}
% end # for AtomicType
