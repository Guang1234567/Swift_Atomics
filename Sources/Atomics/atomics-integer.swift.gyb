//
//  atomics-integer.swift
//  Atomics
//
//  Created by Guillaume Lessard on 31/05/2016.
//  Copyright Â© 2016-2017 Guillaume Lessard. All rights reserved.
//  This file is distributed under the BSD 3-clause license. See LICENSE for details.
//

import CAtomics
% for IntType in ['Int', 'UInt', 'Int8', 'UInt8', 'Int16', 'UInt16', 'Int32', 'UInt32', 'Int64', 'UInt64']:
% AtomicType = 'Atomic' + IntType
% CAtomicsType = 'CAtomics' + IntType

public struct ${AtomicType}
{
  @_versioned var val = ${CAtomicsType}()

  public init(_ value: ${IntType} = 0)
  {
    ${CAtomicsType}Init(value, &val)
  }

  public var value: ${IntType} {
    @inline(__always)
    mutating get { return ${CAtomicsType}Load(&val, .relaxed) }
  }
}

extension ${AtomicType}
{
  @inline(__always)
  public mutating func load(order: LoadMemoryOrder = .relaxed) -> ${IntType}
  {
    return ${CAtomicsType}Load(&val, order)
  }

  @inline(__always)
  public mutating func store(_ value: ${IntType}, order: StoreMemoryOrder = .relaxed)
  {
    ${CAtomicsType}Store(value, &val, order)
  }

  @inline(__always)
  public mutating func swap(_ value: ${IntType}, order: MemoryOrder = .relaxed) -> ${IntType}
  {
    return ${CAtomicsType}Swap(value, &val, order)
  }

% for (rmwMethod, rmwFunc, rmwParam) in [('add', 'Add', 'delta'), ('subtract', 'Sub', 'delta'), ('bitwiseOr', 'Or', 'bits'), ('bitwiseXor', 'Xor', 'bits'), ('bitwiseAnd', 'And', 'bits')]:
  @inline(__always) @discardableResult
  public mutating func ${rmwMethod}(_ ${rmwParam}: ${IntType}, order: MemoryOrder = .relaxed) -> ${IntType}
  {
    return ${CAtomicsType}${rmwFunc}(${rmwParam}, &val, order)
  }

% end
% for (inc, op) in [('increment', 'Add'), ('decrement', 'Sub')]:
  @inline(__always) @discardableResult
  public mutating func ${inc}(order: MemoryOrder = .relaxed) -> ${IntType}
  {
    return ${CAtomicsType}${op}(1, &val, order)
  }

% end
  @inline(__always) @discardableResult
  public mutating func loadCAS(current: UnsafeMutablePointer<${IntType}>, future: ${IntType},
                               type: CASType = .weak,
                               orderSwap: MemoryOrder = .relaxed,
                               orderLoad: LoadMemoryOrder = .relaxed) -> Bool
  {
    return ${CAtomicsType}CAS(current, future, &val, type, orderSwap, orderLoad)
  }

  @inline(__always) @discardableResult
  public mutating func CAS(current: ${IntType}, future: ${IntType},
                           type: CASType = .weak,
                           order: MemoryOrder = .relaxed) -> Bool
  {
    var expect = current
    return loadCAS(current: &expect, future: future, type: type, orderSwap: order, orderLoad: .relaxed)
  }
}
% end # for AtomicType
