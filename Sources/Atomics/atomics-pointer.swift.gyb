//
//  atomics-pointer.swift
//  Atomics
//
//  Created by Guillaume Lessard on 2015-05-21.
//  Copyright Â© 2015-2017 Guillaume Lessard. All rights reserved.
//  This file is distributed under the BSD 3-clause license. See LICENSE for details.
//

@_exported import enum CAtomics.MemoryOrder
@_exported import enum CAtomics.LoadMemoryOrder
@_exported import enum CAtomics.StoreMemoryOrder
@_exported import enum CAtomics.CASType
import CAtomics
% for Nullable in ['', 'Optional']:
% for Mutable in ['', 'Mutable']:
% Pointer = 'Pointer<Pointee>?' if (Nullable == 'Optional') else 'Pointer<Pointee>'
% optional = '?' if (Nullable == 'Optional') else ''

public struct Atomic${Nullable}${Mutable}Pointer<Pointee>
{
#if swift(>=4.2)
  @usableFromInline var ptr = Atomic${Nullable}${Mutable}RawPointer()
#else
  @_versioned var ptr = Atomic${Nullable}${Mutable}RawPointer()
#endif

% if Nullable == 'Optional':
  public init()
  {
    CAtomicsInitialize(&ptr, nil)
  }

% end
  public init(_ pointer: Unsafe${Mutable}${Pointer})
  {
    CAtomicsInitialize(&ptr, Unsafe${Mutable}RawPointer(pointer))
  }

  public mutating func initialize(_ pointer: Unsafe${Mutable}${Pointer})
  {
    CAtomicsInitialize(&ptr, Unsafe${Mutable}RawPointer(pointer))
  }

#if swift(>=4.2)
  public var pointer: Unsafe${Mutable}${Pointer} {
    @inlinable
    mutating get {
      return Unsafe${Mutable}Pointer<Pointee>(CAtomicsLoad(&ptr, .relaxed)${optional}.assumingMemoryBound(to: Pointee.self))
    }
  }
#else
  public var pointer: Unsafe${Mutable}${Pointer} {
    @inline(__always)
    mutating get {
      return Unsafe${Mutable}Pointer<Pointee>(CAtomicsLoad(&ptr, .relaxed)${optional}.assumingMemoryBound(to: Pointee.self))
    }
  }
#endif

#if swift(>=4.2)
  @inlinable
  public mutating func load(order: LoadMemoryOrder = .sequential) -> Unsafe${Mutable}${Pointer}
  {
    return Unsafe${Mutable}Pointer<Pointee>(CAtomicsLoad(&ptr, order)${optional}.assumingMemoryBound(to: Pointee.self))
  }
#else
  @inline(__always)
  public mutating func load(order: LoadMemoryOrder = .sequential) -> Unsafe${Mutable}${Pointer}
  {
    return Unsafe${Mutable}Pointer<Pointee>(CAtomicsLoad(&ptr, order)${optional}.assumingMemoryBound(to: Pointee.self))
  }
#endif

#if swift(>=4.2)
  @inlinable
  public mutating func store(_ pointer: Unsafe${Mutable}${Pointer}, order: StoreMemoryOrder = .sequential)
  {
    CAtomicsStore(&ptr, Unsafe${Mutable}RawPointer(pointer), order)
  }
#else
  @inline(__always)
  public mutating func store(_ pointer: Unsafe${Mutable}${Pointer}, order: StoreMemoryOrder = .sequential)
  {
    CAtomicsStore(&ptr, Unsafe${Mutable}RawPointer(pointer), order)
  }
#endif

#if swift(>=4.2)
  @inlinable
  public mutating func swap(_ pointer: Unsafe${Mutable}${Pointer}, order: MemoryOrder = .sequential) -> Unsafe${Mutable}${Pointer}
  {
    return Unsafe${Mutable}Pointer<Pointee>(CAtomicsExchange(&ptr, Unsafe${Mutable}RawPointer(pointer), order)${optional}.assumingMemoryBound(to: Pointee.self))
  }
#else
  @inline(__always)
  public mutating func swap(_ pointer: Unsafe${Mutable}${Pointer}, order: MemoryOrder = .sequential) -> Unsafe${Mutable}${Pointer}
  {
    return Unsafe${Mutable}Pointer<Pointee>(CAtomicsExchange(&ptr, Unsafe${Mutable}RawPointer(pointer), order)${optional}.assumingMemoryBound(to: Pointee.self))
  }
#endif

#if swift(>=4.2)
  @inlinable
  public mutating func loadCAS(current: inout Unsafe${Mutable}${Pointer},
                               future: Unsafe${Mutable}${Pointer},
                               type: CASType = .weak,
                               orderSwap: MemoryOrder = .sequential,
                               orderLoad: LoadMemoryOrder = .sequential) -> Bool
  {
    var c = Unsafe${Mutable}RawPointer(current)
    defer { current = c${optional}.assumingMemoryBound(to: Pointee.self) }
    return CAtomicsCompareAndExchange(&ptr, &c, Unsafe${Mutable}RawPointer(future), type, orderSwap, orderLoad)
  }
#else
  @inline(__always) @discardableResult
  public mutating func loadCAS(current: inout Unsafe${Mutable}${Pointer},
                               future: Unsafe${Mutable}${Pointer},
                               type: CASType = .weak,
                               orderSwap: MemoryOrder = .sequential,
                               orderLoad: LoadMemoryOrder = .sequential) -> Bool
  {
    var c = Unsafe${Mutable}RawPointer(current)
    defer { current = c${optional}.assumingMemoryBound(to: Pointee.self) }
    return CAtomicsCompareAndExchange(&ptr, &c, Unsafe${Mutable}RawPointer(future), type, orderSwap, orderLoad)
  }
#endif

#if swift(>=4.2)
  @inlinable
  public mutating func CAS(current: Unsafe${Mutable}${Pointer}, future: Unsafe${Mutable}${Pointer},
                           type: CASType = .strong,
                           order: MemoryOrder = .sequential) -> Bool
  {
    return CAtomicsCompareAndExchange(&ptr, current, future, type, order)
  }
#else
  @inline(__always) @discardableResult
  public mutating func CAS(current: Unsafe${Mutable}${Pointer}, future: Unsafe${Mutable}${Pointer},
                           type: CASType = .strong,
                           order: MemoryOrder = .sequential) -> Bool
  {
    return CAtomicsCompareAndExchange(&ptr, current, future, type, order)
  }
#endif
}
% end
% end
% for (AtomicType, PointerType) in [('AtomicRawPointer', 'UnsafeRawPointer'), ('AtomicOptionalRawPointer', 'UnsafeRawPointer?'), ('AtomicMutableRawPointer', 'UnsafeMutableRawPointer'), ('AtomicOptionalMutableRawPointer', 'UnsafeMutableRawPointer?'), ('AtomicOpaquePointer', 'OpaquePointer'), ('AtomicOptionalOpaquePointer', 'OpaquePointer?')]:

@_exported import struct CAtomics.${AtomicType}

extension ${AtomicType}
{
#if swift(>=4.2)
  public var pointer: ${PointerType} {
    @inlinable
    mutating get {
      return CAtomicsLoad(&self, .relaxed)
    }
  }
#else
  public var pointer: ${PointerType} {
    @inline(__always)
    mutating get {
      return CAtomicsLoad(&self, .relaxed)
    }
  }
#endif

#if swift(>=4.2)
  @inlinable
  public mutating func initialize(_ pointer: ${PointerType})
  {
    CAtomicsInitialize(&self, pointer)
  }
#else
  @inline(__always)
  public mutating func initialize(_ pointer: ${PointerType})
  {
    CAtomicsInitialize(&self, pointer)
  }
#endif

#if swift(>=4.2)
  @inlinable
  public mutating func load(order: LoadMemoryOrder = .sequential) -> ${PointerType}
  {
    return CAtomicsLoad(&self, order)
  }
#else
  @inline(__always)
  public mutating func load(order: LoadMemoryOrder = .sequential) -> ${PointerType}
  {
    return CAtomicsLoad(&self, order)
  }
#endif

#if swift(>=4.2)
  @inlinable
  public mutating func store(_ pointer: ${PointerType}, order: StoreMemoryOrder = .sequential)
  {
    CAtomicsStore(&self, pointer, order)
  }
#else
  @inline(__always)
  public mutating func store(_ pointer: ${PointerType}, order: StoreMemoryOrder = .sequential)
  {
    CAtomicsStore(&self, pointer, order)
  }
#endif

#if swift(>=4.2)
  @inlinable
  public mutating func swap(_ pointer: ${PointerType}, order: MemoryOrder = .sequential) -> ${PointerType}
  {
    return CAtomicsExchange(&self, pointer, order)
  }
#else
  @inline(__always)
  public mutating func swap(_ pointer: ${PointerType}, order: MemoryOrder = .sequential) -> ${PointerType}
  {
    return CAtomicsExchange(&self, pointer, order)
  }
#endif

#if swift(>=4.2)
  @inlinable @discardableResult
  public mutating func loadCAS(current: inout ${PointerType},
                               future: ${PointerType},
                               type: CASType = .weak,
                               orderSwap: MemoryOrder = .sequential,
                               orderLoad: LoadMemoryOrder = .sequential) -> Bool
  {
    return CAtomicsCompareAndExchange(&self, &current, future, type, orderSwap, orderLoad)
  }
#else
  @inline(__always) @discardableResult
  public mutating func loadCAS(current: inout ${PointerType},
                               future: ${PointerType},
                               type: CASType = .weak,
                               orderSwap: MemoryOrder = .sequential,
                               orderLoad: LoadMemoryOrder = .sequential) -> Bool
  {
    return CAtomicsCompareAndExchange(&self, &current, future, type, orderSwap, orderLoad)
  }
#endif

#if swift(>=4.2)
  @inlinable @discardableResult
  public mutating func CAS(current: ${PointerType}, future: ${PointerType},
                           type: CASType = .strong,
                           order: MemoryOrder = .sequential) -> Bool
  {
    return CAtomicsCompareAndExchange(&self, current, future, type, order)
  }
#else
  @inline(__always) @discardableResult
  public mutating func CAS(current: ${PointerType}, future: ${PointerType},
                           type: CASType = .strong,
                           order: MemoryOrder = .sequential) -> Bool
  {
    return CAtomicsCompareAndExchange(&self, current, future, type, order)
  }
#endif
}
% end

@available(*, unavailable, renamed: "AtomicPointer")
public typealias AtomicNonNullPointer<T> = AtomicPointer<T>

@available(*, unavailable, renamed: "AtomicMutablePointer")
public typealias AtomicNonNullMutablePointer<T> = AtomicMutablePointer<T>

@available(*, unavailable, renamed: "AtomicRawPointer")
public typealias AtomicNonNullRawPointer = AtomicRawPointer

@available(*, unavailable, renamed: "AtomicMutableRawPointer")
public typealias AtomicNonNullMutableRawPointer = AtomicMutableRawPointer

@available(*, unavailable, renamed: "AtomicOpaquePointer")
public typealias AtomicNonNullOpaquePointer = AtomicOpaquePointer
