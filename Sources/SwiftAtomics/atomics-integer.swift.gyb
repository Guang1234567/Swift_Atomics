//
//  atomics-integer.swift
//  Atomics
//
//  Created by Guillaume Lessard on 31/05/2016.
//  Copyright Â© 2016-2017 Guillaume Lessard. All rights reserved.
//  This file is distributed under the BSD 3-clause license. See LICENSE for details.
//

@_exported import enum CAtomics.MemoryOrder
@_exported import enum CAtomics.LoadMemoryOrder
@_exported import enum CAtomics.StoreMemoryOrder
@_exported import enum CAtomics.CASType
import CAtomics
% for IntType in ['Int', 'UInt', 'Int8', 'UInt8', 'Int16', 'UInt16', 'Int32', 'UInt32', 'Int64', 'UInt64', 'Bool']:
% AtomicType = 'Atomic' + IntType

@_exported import struct CAtomics.${AtomicType}

extension ${AtomicType}
{
#if swift(>=4.2)
% for inlinable in ['@inlinable', '@inline(__always)']:
% usableFromInline = '@usableFromInline' if inlinable == '@inlinable' else '@_versioned'
% end = '#else' if inlinable == '@inlinable' else '#endif'
  public var value: ${IntType} {
    ${inlinable}
    mutating get { return CAtomicsLoad(&self, .relaxed) }
  }

  ${inlinable}
  public mutating func initialize(_ value: ${IntType})
  {
    CAtomicsInitialize(&self, value)
  }


  ${inlinable}
  public mutating func load(order: LoadMemoryOrder = .acquire) -> ${IntType}
  {
    return CAtomicsLoad(&self, order)
  }

  ${inlinable}
  public mutating func store(_ value: ${IntType}, order: StoreMemoryOrder = .release)
  {
    CAtomicsStore(&self, value, order)
  }


  ${inlinable}
  public mutating func swap(_ value: ${IntType}, order: MemoryOrder = .acqrel) -> ${IntType}
  {
    return CAtomicsExchange(&self, value, order)
  }

% if IntType == 'Bool':
% for (rmwMethod, rmwFunc, rmwParam) in [('or', 'Or', 'value'), ('xor', 'Xor', 'value'), ('and', 'And', 'value')]:

  ${inlinable} @discardableResult
  public mutating func ${rmwMethod}(_ ${rmwParam}: ${IntType}, order: MemoryOrder = .acqrel) -> ${IntType}
  {
    return CAtomics${rmwFunc}(&self, ${rmwParam}, order)
  }

% end # for
% else:
% for (rmwMethod, rmwFunc, rmwParam) in [('add', 'Add', 'delta'), ('subtract', 'Subtract', 'delta'), ('bitwiseOr', 'BitwiseOr', 'bits'), ('bitwiseXor', 'BitwiseXor', 'bits'), ('bitwiseAnd', 'BitwiseAnd', 'bits')]:
  ${inlinable} @discardableResult
  public mutating func ${rmwMethod}(_ ${rmwParam}: ${IntType}, order: MemoryOrder = .acqrel) -> ${IntType}
  {
    return CAtomics${rmwFunc}(&self, ${rmwParam}, order)
  }

% end # for
% for (inc, op) in [('increment', 'Add'), ('decrement', 'Subtract')]:
  ${inlinable} @discardableResult
  public mutating func ${inc}(order: MemoryOrder = .acqrel) -> ${IntType}
  {
    return CAtomics${op}(&self, 1, order)
  }

% end # for
% end # if IntType == 'Bool'
  ${inlinable} @discardableResult
  public mutating func loadCAS(current: inout ${IntType}, future: ${IntType},
                               type: CASType = .weak,
                               orderSwap: MemoryOrder = .acqrel,
                               orderLoad: LoadMemoryOrder = .acquire) -> Bool
  {
    return type == .weak
    ? CAtomicsCompareAndExchangeWeak(&self, &current, future, orderSwap, orderLoad)
    : CAtomicsCompareAndExchangeStrong(&self, &current, future, orderSwap, orderLoad)
  }

  ${inlinable} @discardableResult
  public mutating func CAS(current: ${IntType}, future: ${IntType},
                           type: CASType = .strong,
                           order: MemoryOrder = .acqrel) -> Bool
  {
    var current = current
    return loadCAS(current: &current, future: future, type: type,
                   orderSwap: order, orderLoad: order.asLoadOrdering())
  }
${end}
% end # inlinable
}
% end # for AtomicType
