//
//  CAtomicsTests.swift
//  AtomicsTests
//
//  Copyright Â© 2016-2017 Guillaume Lessard. All rights reserved.
//  This file is distributed under the BSD 3-clause license. See LICENSE for details.
//

import XCTest

import CAtomics
% integers = ['Int', 'UInt', 'Int8', 'UInt8', 'Int16', 'UInt16', 'Int32', 'UInt32', 'Int64', 'UInt64']

public class CAtomicsBasicTests: XCTestCase
{
% for i in integers:
  public func test${i}()
  {
    var i = Atomic${i}()
    CAtomicsInitialize(&i, 0)
    XCTAssertEqual(0, CAtomicsLoad(&i, .relaxed))
    XCTAssert(CAtomicsIsLockFree(&i))

#if swift(>=4.0)
    let r1 = ${i}.randomPositive()
    let r2 = ${i}.randomPositive()
    let r3 = ${i}.randomPositive()
#else
% truncating = '' if (i == 'Int' or i == 'UInt' or i == 'Int64' or i == 'UInt64') else 'truncatingBitPattern: '
    let r1 = ${i}(${truncating}UInt.randomPositive())
    let r2 = ${i}(${truncating}UInt.randomPositive())
    let r3 = ${i}(${truncating}UInt.randomPositive())
#endif

    CAtomicsStore(&i, r1, .relaxed)
    XCTAssertEqual(r1, CAtomicsLoad(&i, .relaxed))

    var j = CAtomicsExchange(&i, r2, .relaxed)
    XCTAssertEqual(r1, j)
    XCTAssertEqual(r2, CAtomicsLoad(&i, .relaxed))

    j = CAtomicsAdd(&i, r1, .relaxed)
    XCTAssertEqual(r2, j)
    XCTAssertEqual(r1 &+ r2, CAtomicsLoad(&i, .relaxed))

    j = CAtomicsSubtract(&i, r2, .relaxed)
    XCTAssertEqual(r1 &+ r2, j)
    XCTAssertEqual(r1, CAtomicsLoad(&i, .relaxed))

    CAtomicsStore(&i, r1, .relaxed)
    j = CAtomicsBitwiseOr(&i, r2, .relaxed)
    XCTAssertEqual(r1, j)
    XCTAssertEqual(r1 | r2, CAtomicsLoad(&i, .relaxed))

    CAtomicsStore(&i, r2, .relaxed)
    j = CAtomicsBitwiseXor(&i, r1, .relaxed)
    XCTAssertEqual(r2, j)
    XCTAssertEqual(r1 ^ r2, CAtomicsLoad(&i, .relaxed))

    CAtomicsStore(&i, r1, .relaxed)
    j = CAtomicsBitwiseAnd(&i, r2, .relaxed)
    XCTAssertEqual(r1, j)
    XCTAssertEqual(r1 & r2, CAtomicsLoad(&i, .relaxed))

    j = r1
    CAtomicsStore(&i, r1, .relaxed)
    XCTAssertTrue(CAtomicsCompareAndExchange(&i, &j, r2, .strong, .relaxed, .relaxed))
    XCTAssertEqual(r2, CAtomicsLoad(&i, .relaxed))

    j = r2
    CAtomicsStore(&i, r1, .relaxed)
    while(!CAtomicsCompareAndExchange(&i, &j, r3, .weak, .relaxed, .relaxed)) {}
    XCTAssertEqual(r1, j)
    XCTAssertEqual(r3, CAtomicsLoad(&i, .relaxed))
  }

% end
  public func testBool()
  {
    var b = AtomicBool()
    CAtomicsInitialize(&b, false)
    XCTAssert(CAtomicsLoad(&b, .relaxed) == false)
    XCTAssert(CAtomicsIsLockFree(&b))

    CAtomicsStore(&b, false, .relaxed)
    XCTAssert(CAtomicsLoad(&b, .relaxed) == false)

    CAtomicsStore(&b, true, .relaxed)
    XCTAssert(CAtomicsLoad(&b, .relaxed) == true)

    CAtomicsStore(&b, false, .relaxed)
    CAtomicsOr(&b, true, .relaxed)
    XCTAssert(CAtomicsLoad(&b, .relaxed) == true)
    CAtomicsOr(&b, false, .relaxed)
    XCTAssert(CAtomicsLoad(&b, .relaxed) == true)
    CAtomicsStore(&b, false, .relaxed)
    CAtomicsOr(&b, false, .relaxed)
    XCTAssert(CAtomicsLoad(&b, .relaxed) == false)
    CAtomicsOr(&b, true, .relaxed)
    XCTAssert(CAtomicsLoad(&b, .relaxed) == true)

    CAtomicsAnd(&b, false, .relaxed)
    XCTAssert(CAtomicsLoad(&b, .relaxed) == false)
    CAtomicsAnd(&b, true, .relaxed)
    XCTAssert(CAtomicsLoad(&b, .relaxed) == false)

    CAtomicsXor(&b, false, .relaxed)
    XCTAssert(CAtomicsLoad(&b, .relaxed) == false)
    CAtomicsXor(&b, true, .relaxed)
    XCTAssert(CAtomicsLoad(&b, .relaxed) == true)

    let old = CAtomicsExchange(&b, false, .relaxed)
    XCTAssert(old == true)
    XCTAssert(CAtomicsExchange(&b, true, .relaxed) == false)

    var current = true
    XCTAssert(CAtomicsLoad(&b, .relaxed) == current)
    CAtomicsCompareAndExchange(&b, &current, false, .strong, .relaxed, .relaxed)
    current = CAtomicsLoad(&b, .relaxed)
    XCTAssert(current == false)
    if CAtomicsCompareAndExchange(&b, &current, true, .strong, .relaxed, .relaxed)
    {
      current = !current
      XCTAssert(CAtomicsCompareAndExchange(&b, &current, false, .weak, .relaxed, .relaxed))
      current = !current
      XCTAssert(CAtomicsCompareAndExchange(&b, &current, true, .weak, .relaxed, .relaxed))
    }
  }
}

% pointers = ['AtomicOptionalRawPointer', 'AtomicRawPointer', 'AtomicMutableRawPointer', 'AtomicOptionalMutableRawPointer', 'AtomicOpaquePointer', 'AtomicOptionalOpaquePointer']
extension CAtomicsBasicTests
{
% for type in pointers:
  public func test${type}()
  {
% mutptr = 'Mutable' if 'Mutable' in type else ''
% prefix = 'Unsafe' + mutptr + 'Raw'
% native = prefix if 'RawPointer' in type else 'Opaque'
% bang = '' if ('Optional' in type) else '!'
    let r0 = ${native}Pointer(bitPattern: UInt.randomPositive())${bang}
    let r1 = ${native}Pointer(bitPattern: UInt.randomPositive())${bang}
    let r2 = ${native}Pointer(bitPattern: UInt.randomPositive())${bang}
    let r3 = ${native}Pointer(bitPattern: UInt.randomPositive())${bang}

    var p = ${type}(r3)
    XCTAssertEqual(r3, CAtomicsLoad(&p, .relaxed))
    XCTAssert(CAtomicsIsLockFree(&p))

    CAtomicsInitialize(&p, r0)
    XCTAssertEqual(r0, CAtomicsLoad(&p, .relaxed))

    CAtomicsStore(&p, r1, .relaxed)
    XCTAssertEqual(r1, CAtomicsLoad(&p, .relaxed))

    var j = CAtomicsExchange(&p, r2, .relaxed)
    XCTAssertEqual(r1, j)
    XCTAssertEqual(r2, CAtomicsLoad(&p, .relaxed))

    XCTAssertTrue(CAtomicsCompareAndExchange(&p, r2, r3, .strong, .relaxed))
    XCTAssertEqual(r3, CAtomicsLoad(&p, .relaxed))

    XCTAssertFalse(CAtomicsCompareAndExchange(&p, j, r2, .strong, .relaxed))
    XCTAssertTrue(CAtomicsCompareAndExchange(&p, r3, r2, .strong, .relaxed))
    j = CAtomicsLoad(&p, .relaxed)
    XCTAssertTrue(CAtomicsCompareAndExchange(&p, r2, r1, .strong, .relaxed))
    while !CAtomicsCompareAndExchange(&p, &j, r3, .weak, .relaxed, .relaxed) {}
    XCTAssertEqual(r1, j)
    XCTAssertEqual(r3, CAtomicsLoad(&p, .relaxed))
  }

% end
  public func testFence()
  {
    CAtomicsThreadFence(.release)
    CAtomicsThreadFence(.acquire)
  }
}
% optionality = ['', 'Optional']
% for optional in optionality:

protocol Tagged${optional}Pointer: Equatable
{
  associatedtype Pointer: Equatable
% if optional == 'Optional':
  var ptr: Optional<Pointer> { get }
% else:
  var ptr: Pointer { get }
% end
  var tag: Int { get }
}

extension Tagged${optional}Pointer
{
  static public func ==(lhs: Self, rhs: Self) -> Bool
  {
    return (lhs.ptr == rhs.ptr) && (lhs.tag == rhs.tag)
  }
}
% end

% mutability = ['', 'Mutable']
% for optional in optionality:
% for mutable in mutability:
% type = 'Tagged' + optional + mutable + 'RawPointer'
extension ${type}: Tagged${optional}Pointer {}
% end
% end

extension CAtomicsBasicTests
{
% for optional in optionality:
% for mutable in mutability:
% nativeType = 'Unsafe' + mutable + 'RawPointer'
% taggedType = 'Tagged' + optional + mutable + 'RawPointer'
  public func test${taggedType}()
  {
% bang = '!' if (optional is '') else ''
    let r0 = ${taggedType}(${nativeType}(bitPattern: UInt.randomPositive())${bang}, tag: 2)
    var r1 = r0
    let r2 = ${taggedType}(${nativeType}(bitPattern: UInt.randomPositive())${bang}, tag: 4)

    XCTAssertEqual(MemoryLayout<${taggedType}>.size, MemoryLayout<${nativeType}>.size*2)

    XCTAssertEqual(r0, r1)
    r1 = r0.incremented()
    XCTAssertNotEqual(r0, r1)
    XCTAssertEqual(r0.ptr, r1.ptr)
    XCTAssertEqual(r0.tag &+ 1, r1.tag)

    XCTAssertEqual(r1.tag, 3)
    r1 = r0.incremented(with: r2.ptr)
    XCTAssertEqual(r0.tag &+ 1, r1.tag)
    XCTAssertEqual(r1.ptr, r2.ptr)
    XCTAssertNotEqual(r1, r2)
    r1.increment()
    XCTAssertEqual(r1, r2)

    let r3 = r2.incremented()
    XCTAssertNotEqual(r2, r3)
    XCTAssertEqual(r2.ptr, r3.ptr)
    XCTAssertEqual(r2.tag, r3.tag &- 1)
    var r4 = r2
    r4.tag += 1
    XCTAssertEqual(r3, r4)
  }

% atomicType = 'Atomic' + taggedType
  public func test${atomicType}()
  {
% bang = '!' if (optional is '') else ''
    let r0 = ${taggedType}(${nativeType}(bitPattern: UInt.randomPositive())${bang}, tag: 0)
    let r1 = ${taggedType}(${nativeType}(bitPattern: UInt.randomPositive())${bang}, tag: 1)
    let r2 = ${taggedType}(${nativeType}(bitPattern: UInt.randomPositive())${bang}, tag: 2)
    let r3 = r2.incremented()

    var p = ${atomicType}(r3)
    XCTAssertEqual(r3, CAtomicsLoad(&p, .relaxed))
    XCTAssert(CAtomicsIsLockFree(&p))

    CAtomicsInitialize(&p, r0)
    XCTAssertEqual(r0, CAtomicsLoad(&p, .relaxed))

    CAtomicsStore(&p, r1, .relaxed)
    XCTAssertEqual(r1, CAtomicsLoad(&p, .relaxed))

    var j = CAtomicsExchange(&p, r2, .relaxed)
    XCTAssertEqual(r1, j)
    XCTAssertEqual(r2, CAtomicsLoad(&p, .relaxed))

    XCTAssertTrue(CAtomicsCompareAndExchange(&p, r2, r3, .strong, .relaxed))
    XCTAssertEqual(r3, CAtomicsLoad(&p, .relaxed))

    XCTAssertFalse(CAtomicsCompareAndExchange(&p, j, r2, .strong, .relaxed))
    XCTAssertTrue(CAtomicsCompareAndExchange(&p, r3, r2, .strong, .relaxed))
    j = CAtomicsLoad(&p, .relaxed)
    XCTAssertTrue(CAtomicsCompareAndExchange(&p, r2, r1, .strong, .relaxed))
    while !CAtomicsCompareAndExchange(&p, &j, r3, .weak, .relaxed, .relaxed) {}
    XCTAssertEqual(r1, j)
    XCTAssertEqual(r3, CAtomicsLoad(&p, .relaxed))
  }

% end
% end
}
