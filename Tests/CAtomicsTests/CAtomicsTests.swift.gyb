//
//  CAtomicsTests.swift
//  AtomicsTests
//
//  Copyright Â© 2016-2017 Guillaume Lessard. All rights reserved.
//  This file is distributed under the BSD 3-clause license. See LICENSE for details.
//

import XCTest

import CAtomics
% pointers = ['Raw', 'MutableRaw', 'Opaque']
% integers = ['Int', 'UInt', 'Int8', 'UInt8', 'Int16', 'UInt16', 'Int32', 'UInt32', 'Int64', 'UInt64']

public class CAtomicsBasicTests: XCTestCase
{
% for i in integers:
  public func test${i}()
  {
    var i = Atomic${i}()
    i.initialize(0)
    XCTAssertEqual(0, i.load(.relaxed))

#if swift(>=4.0)
    let r1 = ${i}.randomPositive()
    let r2 = ${i}.randomPositive()
    let r3 = ${i}.randomPositive()
#else
% truncating = '' if (i == 'Int' or i == 'UInt' or i == 'Int64' or i == 'UInt64') else 'truncatingBitPattern: '
    let r1 = ${i}(${truncating}UInt.randomPositive())
    let r2 = ${i}(${truncating}UInt.randomPositive())
    let r3 = ${i}(${truncating}UInt.randomPositive())
#endif

    i.store(r1, .relaxed)
    XCTAssertEqual(r1, i.load(.relaxed))

    var j = i.swap(r2, .relaxed)
    XCTAssertEqual(r1, j)
    XCTAssertEqual(r2, i.load(.relaxed))

    j = i.fetch_add(r1, .relaxed)
    XCTAssertEqual(r2, j)
    XCTAssertEqual(r1 &+ r2, i.load(.relaxed))

    j = i.fetch_sub(r2, .relaxed)
    XCTAssertEqual(r1 &+ r2, j)
    XCTAssertEqual(r1, i.load(.relaxed))

    i.store(r1, .relaxed)
    j = i.fetch_or(r2, .relaxed)
    XCTAssertEqual(r1, j)
    XCTAssertEqual(r1 | r2, i.load(.relaxed))

    i.store(r2, .relaxed)
    j = i.fetch_xor(r1, .relaxed)
    XCTAssertEqual(r2, j)
    XCTAssertEqual(r1 ^ r2, i.load(.relaxed))

    i.store(r1, .relaxed)
    j = i.fetch_and(r2, .relaxed)
    XCTAssertEqual(r1, j)
    XCTAssertEqual(r1 & r2, i.load(.relaxed))

    j = r1
    i.store(r1, .relaxed)
    XCTAssertTrue(i.loadCAS(&j, r2, .strong, .relaxed, .relaxed))
    XCTAssertEqual(r2, i.load(.relaxed))

    j = r2
    i.store(r1, .relaxed)
    while(!i.loadCAS(&j, r3, .weak, .relaxed, .relaxed)) {}
    XCTAssertEqual(r1, j)
    XCTAssertEqual(r3, i.load(.relaxed))
  }

% end
% nullability = ['Optional', 'NonNull']
% for type in pointers:
% for nullable in nullability:
  public func test${nullable}${type}Pointer()
  {
% native = 'Opaque' if (type == 'Opaque') else 'Unsafe' + type
% bang = '!' if (nullable == 'NonNull') else ''
    let r0 = ${native}Pointer(bitPattern: UInt.randomPositive())${bang}
    let r1 = ${native}Pointer(bitPattern: UInt.randomPositive())${bang}
    let r2 = ${native}Pointer(bitPattern: UInt.randomPositive())${bang}
    let r3 = ${native}Pointer(bitPattern: UInt.randomPositive())${bang}

    var p = Atomic${nullable}${type}Pointer(r3)
    XCTAssertEqual(r3, p.load(.relaxed))

    p.initialize(r0)
    XCTAssertEqual(r0, p.load(.relaxed))

    p.store(r1, .relaxed)
    XCTAssertEqual(r1, p.load(.relaxed))

    var j = p.swap(r2, .relaxed)
    XCTAssertEqual(r1, j)
    XCTAssertEqual(r2, p.load(.relaxed))

    XCTAssertTrue(p.CAS(r2, r3, .strong, .relaxed))
    XCTAssertEqual(r3, p.load(.relaxed))

    XCTAssertFalse(p.CAS(j, r2, .strong, .relaxed))
    XCTAssertTrue(p.CAS(r3, r2, .strong, .relaxed))
    j = p.load(.relaxed)
    XCTAssertTrue(p.CAS(r2, r1, .strong, .relaxed))
    while !p.loadCAS(&j, r3, .weak, .relaxed, .relaxed) {}
    XCTAssertEqual(r1, j)
    XCTAssertEqual(r3, p.load(.relaxed))
  }

% end
% end
  public func testBool()
  {
    var boolean = AtomicBool()
    boolean.initialize(false)
    XCTAssert(boolean.load(.relaxed) == false)

    boolean.store(false, .relaxed)
    XCTAssert(boolean.load(.relaxed) == false)

    boolean.store(true, .relaxed)
    XCTAssert(boolean.load(.relaxed) == true)

    boolean.store(false, .relaxed)
    boolean.fetch_or(true, .relaxed)
    XCTAssert(boolean.load(.relaxed) == true)
    boolean.fetch_or(false, .relaxed)
    XCTAssert(boolean.load(.relaxed) == true)
    boolean.store(false, .relaxed)
    boolean.fetch_or(false, .relaxed)
    XCTAssert(boolean.load(.relaxed) == false)
    boolean.fetch_or(true, .relaxed)
    XCTAssert(boolean.load(.relaxed) == true)

    boolean.fetch_and(false, .relaxed)
    XCTAssert(boolean.load(.relaxed) == false)
    boolean.fetch_and(true, .relaxed)
    XCTAssert(boolean.load(.relaxed) == false)

    boolean.fetch_xor(false, .relaxed)
    XCTAssert(boolean.load(.relaxed) == false)
    boolean.fetch_xor(true, .relaxed)
    XCTAssert(boolean.load(.relaxed) == true)

    let old = boolean.swap(false, .relaxed)
    XCTAssert(old == true)
    XCTAssert(boolean.swap(true, .relaxed) == false)

    var current = true
    XCTAssert(boolean.load(.relaxed) == current)
    boolean.loadCAS(&current, false, .strong, .relaxed, .relaxed)
    current = boolean.load(.relaxed)
    XCTAssert(current == false)
    if boolean.loadCAS(&current, true, .strong, .relaxed, .relaxed)
    {
      current = !current
      XCTAssert(boolean.loadCAS(&current, false, .weak, .relaxed, .relaxed))
      current = !current
      XCTAssert(boolean.loadCAS(&current, true, .weak, .relaxed, .relaxed))
    }
  }

  public func testFence()
  {
    CAtomicsThreadFence(.release)
    CAtomicsThreadFence(.acquire)
  }
}
